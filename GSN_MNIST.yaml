!obj:pylearn2.train.Train {
  dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
    which_set: 'train',
    start: 0,
    stop:  100,
    shuffle: True
  },
  model: !obj:pylearn2.models.autoencoder.DivergenceGSN_MNIST {
    act_dec: !obj:pylearn2.models.mlp.MLP {
      layers: [
        !obj:pylearn2.models.mlp.Sigmoid {
          layer_name: 'dec_1',
          dim: 200,
          irange: 2.8,
        },
        !obj:pylearn2.models.mlp.Linear {
          layer_name: 'dec_2',
          dim: 784,
          irange: 0.7,
        }
      ],
      nvis: 784,
    },
    corruptor: !obj:pylearn2.corruption.TrainableGaussianCorruptor {
      stdev: 0.2,
    },
    decorruptor: !obj:pylearn2.corruption.TrainableGaussianCorruptor {
      stdev: 3,
    }
  },
  algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
    learning_rate: 0.001,
    batch_size: 50,
    monitoring_dataset: {
      train: *train,
    },
    cost: !obj:pylearn2.costs.autoencoder.DivergenceCost_MNIST {
      X: *train,
      num_encodings: 10,
    },
    learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
      init_momentum: 0,
    }
  },
  extensions: [
    # !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
    #   channel_name: 'valid_cost',
    #   save_path: '${PYLEARN2_TRAIN_FILE_FULL_STEM}_best_cost.pkl'
    # }, !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
    #   channel_name: 'valid_dec_stdev',
    #   save_path: '${PYLEARN2_TRAIN_FILE_FULL_STEM}_best_dec_stdev.pkl'
    # },
    !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
      start: 0,
      saturate: 0,
      final_momentum: 0,
    },
    !obj:pylearn2.training_algorithms.learning_rule.NoiseAdjustor {
      start: 40,
      saturate: 200,
      final_noise: 2,
    }
  ],
  save_path: '${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl',
  save_freq: 10,
}
